
Final Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000e16  00000eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800106  00800106  00000eb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f51  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e79  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0b  00000000  00000000  00003e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00004820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a72  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fdd  00000000  00000000  000055ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000658b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	c7 03       	fmuls	r20, r23

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e0       	ldi	r26, 0x06	; 6
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 31       	cpi	r26, 0x17	; 23
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	e6 e1       	ldi	r30, 0x16	; 22
  8e:	fe e0       	ldi	r31, 0x0E	; 14
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a6 30       	cpi	r26, 0x06	; 6
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  b6:	0c 94 09 07 	jmp	0xe12	; 0xe12 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN3DSP7DSPUnitC1Ev>:
	writeData(dacAdress | 1);
	uint16_t value = (uint16_t)readData(true) << 8;
	value |= readData(false);
	stopCondition();
	return value;
}
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
  c6:	0e 94 91 02 	call	0x522	; 0x522 <_ZN3I2C6I2CBusC1Ev>
  ca:	18 82       	st	Y, r1
  cc:	19 82       	std	Y+1, r1	; 0x01
  ce:	1b 82       	std	Y+3, r1	; 0x03
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1d 82       	std	Y+5, r1	; 0x05
  d8:	18 86       	std	Y+8, r1	; 0x08
  da:	1f 82       	std	Y+7, r1	; 0x07
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
  e4:	fc 01       	movw	r30, r24
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
  ea:	13 82       	std	Z+3, r1	; 0x03
  ec:	12 82       	std	Z+2, r1	; 0x02
  ee:	14 82       	std	Z+4, r1	; 0x04
  f0:	98 87       	std	Y+8, r25	; 0x08
  f2:	8f 83       	std	Y+7, r24	; 0x07
  f4:	11 e0       	ldi	r17, 0x01	; 1
  f6:	18 83       	st	Y, r17
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
 100:	9b 83       	std	Y+3, r25	; 0x03
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	fc 01       	movw	r30, r24
 106:	11 82       	std	Z+1, r1	; 0x01
 108:	10 82       	st	Z, r1
 10a:	19 83       	std	Y+1, r17	; 0x01
 10c:	ef 81       	ldd	r30, Y+7	; 0x07
 10e:	f8 85       	ldd	r31, Y+8	; 0x08
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
 118:	13 82       	std	Z+3, r1	; 0x03
 11a:	12 82       	std	Z+2, r1	; 0x02
 11c:	14 82       	std	Z+4, r1	; 0x04
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	08 95       	ret

00000126 <_ZN3DSP7DSPUnit11getAdcValueEv>:
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
 130:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3I2C6I2CBus14startConditionEv>
 134:	6b e9       	ldi	r22, 0x9B	; 155
 136:	c8 01       	movw	r24, r16
 138:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN3I2C6I2CBus9writeDataEh>
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN3I2C6I2CBus8readDataEb>
 144:	c8 2f       	mov	r28, r24
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	dc 2f       	mov	r29, r28
 14a:	cc 27       	eor	r28, r28
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN3I2C6I2CBus8readDataEb>
 154:	c8 2b       	or	r28, r24
 156:	c8 01       	movw	r24, r16
 158:	0e 94 a4 02 	call	0x548	; 0x548 <_ZN3I2C6I2CBus13stopConditionEv>
 15c:	ce 01       	movw	r24, r28
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <_ZN3DSP7DSPUnit11setDacValueEj>:
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	8b 01       	movw	r16, r22
 174:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3I2C6I2CBus14startConditionEv>
 178:	60 e9       	ldi	r22, 0x90	; 144
 17a:	ce 01       	movw	r24, r28
 17c:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN3I2C6I2CBus9writeDataEh>
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN3I2C6I2CBus9writeDataEh>
 188:	b8 01       	movw	r22, r16
 18a:	76 95       	lsr	r23
 18c:	67 95       	ror	r22
 18e:	76 95       	lsr	r23
 190:	67 95       	ror	r22
 192:	ce 01       	movw	r24, r28
 194:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN3I2C6I2CBus9writeDataEh>
 198:	60 2f       	mov	r22, r16
 19a:	62 95       	swap	r22
 19c:	66 0f       	add	r22, r22
 19e:	66 0f       	add	r22, r22
 1a0:	60 7c       	andi	r22, 0xC0	; 192
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN3I2C6I2CBus9writeDataEh>
 1a8:	ce 01       	movw	r24, r28
 1aa:	0e 94 a4 02 	call	0x548	; 0x548 <_ZN3I2C6I2CBus13stopConditionEv>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <_ZN3DSP7DSPUnit15processEquationEv>:
 1b8:	4f 92       	push	r4
 1ba:	5f 92       	push	r5
 1bc:	6f 92       	push	r6
 1be:	7f 92       	push	r7
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	1f 92       	push	r1
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	7c 01       	movw	r14, r24
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	0e 94 91 02 	call	0x522	; 0x522 <_ZN3I2C6I2CBusC1Ev>
 1e8:	c7 01       	movw	r24, r14
 1ea:	0e 94 93 00 	call	0x126	; 0x126 <_ZN3DSP7DSPUnit11getAdcValueEv>
 1ee:	d7 01       	movw	r26, r14
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	2c 91       	ld	r18, X
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	a9 01       	movw	r20, r18
 1f8:	41 50       	subi	r20, 0x01	; 1
 1fa:	51 09       	sbc	r21, r1
 1fc:	14 16       	cp	r1, r20
 1fe:	15 06       	cpc	r1, r21
 200:	04 f5       	brge	.+64     	; 0x242 <_ZN3DSP7DSPUnit15processEquationEv+0x8a>
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	d7 01       	movw	r26, r14
 208:	12 96       	adiw	r26, 0x02	; 2
 20a:	ed 91       	ld	r30, X+
 20c:	fc 91       	ld	r31, X
 20e:	13 97       	sbiw	r26, 0x03	; 3
 210:	24 1b       	sub	r18, r20
 212:	35 0b       	sbc	r19, r21
 214:	21 50       	subi	r18, 0x01	; 1
 216:	30 48       	sbci	r19, 0x80	; 128
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	e2 0f       	add	r30, r18
 21e:	f3 1f       	adc	r31, r19
 220:	df 01       	movw	r26, r30
 222:	12 97       	sbiw	r26, 0x02	; 2
 224:	2d 91       	ld	r18, X+
 226:	3c 91       	ld	r19, X
 228:	31 83       	std	Z+1, r19	; 0x01
 22a:	20 83       	st	Z, r18
 22c:	4f 5f       	subi	r20, 0xFF	; 255
 22e:	5f 4f       	sbci	r21, 0xFF	; 255
 230:	f7 01       	movw	r30, r14
 232:	21 81       	ldd	r18, Z+1	; 0x01
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	61 50       	subi	r22, 0x01	; 1
 23a:	71 09       	sbc	r23, r1
 23c:	46 17       	cp	r20, r22
 23e:	57 07       	cpc	r21, r23
 240:	14 f3       	brlt	.-60     	; 0x206 <_ZN3DSP7DSPUnit15processEquationEv+0x4e>
 242:	d7 01       	movw	r26, r14
 244:	12 96       	adiw	r26, 0x02	; 2
 246:	ed 91       	ld	r30, X+
 248:	fc 91       	ld	r31, X
 24a:	13 97       	sbiw	r26, 0x03	; 3
 24c:	80 83       	st	Z, r24
 24e:	91 83       	std	Z+1, r25	; 0x01
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	95 ff       	sbrs	r25, 5
 258:	fd cf       	rjmp	.-6      	; 0x254 <_ZN3DSP7DSPUnit15processEquationEv+0x9c>
 25a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 25e:	f7 01       	movw	r30, r14
 260:	80 80       	ld	r8, Z
 262:	88 20       	and	r8, r8
 264:	09 f4       	brne	.+2      	; 0x268 <_ZN3DSP7DSPUnit15processEquationEv+0xb0>
 266:	5b c0       	rjmp	.+182    	; 0x31e <_ZN3DSP7DSPUnit15processEquationEv+0x166>
 268:	c7 80       	ldd	r12, Z+7	; 0x07
 26a:	d0 84       	ldd	r13, Z+8	; 0x08
 26c:	91 2c       	mov	r9, r1
 26e:	c4 01       	movw	r24, r8
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0e       	add	r8, r24
 27a:	99 1e       	adc	r9, r25
 27c:	8c 0c       	add	r8, r12
 27e:	9d 1c       	adc	r9, r13
 280:	00 e0       	ldi	r16, 0x00	; 0
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	d6 01       	movw	r26, r12
 286:	ad 90       	ld	r10, X+
 288:	bc 90       	ld	r11, X
 28a:	11 97       	sbiw	r26, 0x01	; 1
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	8c 91       	ld	r24, X
 290:	12 97       	sbiw	r26, 0x02	; 2
 292:	14 96       	adiw	r26, 0x04	; 4
 294:	9c 91       	ld	r25, X
 296:	99 23       	and	r25, r25
 298:	21 f0       	breq	.+8      	; 0x2a2 <_ZN3DSP7DSPUnit15processEquationEv+0xea>
 29a:	f7 01       	movw	r30, r14
 29c:	25 81       	ldd	r18, Z+5	; 0x05
 29e:	36 81       	ldd	r19, Z+6	; 0x06
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <_ZN3DSP7DSPUnit15processEquationEv+0xf4>
 2a2:	d7 01       	movw	r26, r14
 2a4:	12 96       	adiw	r26, 0x02	; 2
 2a6:	2d 91       	ld	r18, X+
 2a8:	3c 91       	ld	r19, X
 2aa:	13 97       	sbiw	r26, 0x03	; 3
 2ac:	81 95       	neg	r24
 2ae:	e8 2f       	mov	r30, r24
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	e2 0f       	add	r30, r18
 2b8:	f3 1f       	adc	r31, r19
 2ba:	60 81       	ld	r22, Z
 2bc:	71 81       	ldd	r23, Z+1	; 0x01
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatunsisf>
 2c6:	2b 01       	movw	r4, r22
 2c8:	3c 01       	movw	r6, r24
 2ca:	b5 01       	movw	r22, r10
 2cc:	bb 0c       	add	r11, r11
 2ce:	88 0b       	sbc	r24, r24
 2d0:	99 0b       	sbc	r25, r25
 2d2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatsisf>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	48 ec       	ldi	r20, 0xC8	; 200
 2dc:	52 e4       	ldi	r21, 0x42	; 66
 2de:	0e 94 3f 04 	call	0x87e	; 0x87e <__divsf3>
 2e2:	9b 01       	movw	r18, r22
 2e4:	ac 01       	movw	r20, r24
 2e6:	c3 01       	movw	r24, r6
 2e8:	b2 01       	movw	r22, r4
 2ea:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3>
 2ee:	2b 01       	movw	r4, r22
 2f0:	3c 01       	movw	r6, r24
 2f2:	b8 01       	movw	r22, r16
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatunsisf>
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	c3 01       	movw	r24, r6
 302:	b2 01       	movw	r22, r4
 304:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__addsf3>
 308:	0e 94 b1 04 	call	0x962	; 0x962 <__fixunssfsi>
 30c:	8b 01       	movw	r16, r22
 30e:	b5 e0       	ldi	r27, 0x05	; 5
 310:	cb 0e       	add	r12, r27
 312:	d1 1c       	adc	r13, r1
 314:	c8 14       	cp	r12, r8
 316:	d9 04       	cpc	r13, r9
 318:	09 f0       	breq	.+2      	; 0x31c <_ZN3DSP7DSPUnit15processEquationEv+0x164>
 31a:	b4 cf       	rjmp	.-152    	; 0x284 <_ZN3DSP7DSPUnit15processEquationEv+0xcc>
 31c:	02 c0       	rjmp	.+4      	; 0x322 <_ZN3DSP7DSPUnit15processEquationEv+0x16a>
 31e:	00 e0       	ldi	r16, 0x00	; 0
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	b8 01       	movw	r22, r16
 324:	c7 01       	movw	r24, r14
 326:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN3DSP7DSPUnit11setDacValueEj>
 32a:	f7 01       	movw	r30, r14
 32c:	84 81       	ldd	r24, Z+4	; 0x04
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	9c 01       	movw	r18, r24
 332:	21 50       	subi	r18, 0x01	; 1
 334:	31 09       	sbc	r19, r1
 336:	12 16       	cp	r1, r18
 338:	13 06       	cpc	r1, r19
 33a:	04 f5       	brge	.+64     	; 0x37c <_ZN3DSP7DSPUnit15processEquationEv+0x1c4>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	d7 01       	movw	r26, r14
 342:	15 96       	adiw	r26, 0x05	; 5
 344:	ed 91       	ld	r30, X+
 346:	fc 91       	ld	r31, X
 348:	16 97       	sbiw	r26, 0x06	; 6
 34a:	82 1b       	sub	r24, r18
 34c:	93 0b       	sbc	r25, r19
 34e:	81 50       	subi	r24, 0x01	; 1
 350:	90 48       	sbci	r25, 0x80	; 128
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	e8 0f       	add	r30, r24
 358:	f9 1f       	adc	r31, r25
 35a:	df 01       	movw	r26, r30
 35c:	12 97       	sbiw	r26, 0x02	; 2
 35e:	8d 91       	ld	r24, X+
 360:	9c 91       	ld	r25, X
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	f7 01       	movw	r30, r14
 36c:	84 81       	ldd	r24, Z+4	; 0x04
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ac 01       	movw	r20, r24
 372:	41 50       	subi	r20, 0x01	; 1
 374:	51 09       	sbc	r21, r1
 376:	24 17       	cp	r18, r20
 378:	35 07       	cpc	r19, r21
 37a:	14 f3       	brlt	.-60     	; 0x340 <_ZN3DSP7DSPUnit15processEquationEv+0x188>
 37c:	d7 01       	movw	r26, r14
 37e:	15 96       	adiw	r26, 0x05	; 5
 380:	ed 91       	ld	r30, X+
 382:	fc 91       	ld	r31, X
 384:	16 97       	sbiw	r26, 0x06	; 6
 386:	11 83       	std	Z+1, r17	; 0x01
 388:	00 83       	st	Z, r16
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	7f 90       	pop	r7
 3a6:	6f 90       	pop	r6
 3a8:	5f 90       	pop	r5
 3aa:	4f 90       	pop	r4
 3ac:	08 95       	ret

000003ae <_ZN3DSP7DSPUnit21setDifferenceEquationEPNS_4TermEh>:

void DSPUnit::setDifferenceEquation(Term* diffEq, uint8_t eqLength)
{
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	8c 01       	movw	r16, r24
 3bc:	7b 01       	movw	r14, r22
 3be:	c4 2f       	mov	r28, r20
	if(diffEquation != nullptr)//Remove the current equation
 3c0:	dc 01       	movw	r26, r24
 3c2:	17 96       	adiw	r26, 0x07	; 7
 3c4:	8d 91       	ld	r24, X+
 3c6:	9c 91       	ld	r25, X
 3c8:	18 97       	sbiw	r26, 0x08	; 8
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	39 f0       	breq	.+14     	; 0x3dc <_ZN3DSP7DSPUnit21setDifferenceEquationEPNS_4TermEh+0x2e>
	{
		delete diffEquation;
 3ce:	65 e0       	ldi	r22, 0x05	; 5
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZdlPvj>
		diffEquation = nullptr;
 3d6:	f8 01       	movw	r30, r16
 3d8:	10 86       	std	Z+8, r1	; 0x08
 3da:	17 82       	std	Z+7, r1	; 0x07
	}
	if(sampleHistory != nullptr)//Remove the sample history
 3dc:	d8 01       	movw	r26, r16
 3de:	12 96       	adiw	r26, 0x02	; 2
 3e0:	8d 91       	ld	r24, X+
 3e2:	9c 91       	ld	r25, X
 3e4:	13 97       	sbiw	r26, 0x03	; 3
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <_ZN3DSP7DSPUnit21setDifferenceEquationEPNS_4TermEh+0x4a>
	{
		delete sampleHistory;
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZdlPvj>
		sampleHistory = nullptr;
 3f2:	f8 01       	movw	r30, r16
 3f4:	13 82       	std	Z+3, r1	; 0x03
 3f6:	12 82       	std	Z+2, r1	; 0x02
	}
	sampleHistoryLength = 0;
 3f8:	d8 01       	movw	r26, r16
 3fa:	11 96       	adiw	r26, 0x01	; 1
 3fc:	1c 92       	st	X, r1
 3fe:	11 97       	sbiw	r26, 0x01	; 1
	if(outputHistory != nullptr)//Remove the output history
 400:	15 96       	adiw	r26, 0x05	; 5
 402:	8d 91       	ld	r24, X+
 404:	9c 91       	ld	r25, X
 406:	16 97       	sbiw	r26, 0x06	; 6
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	39 f0       	breq	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		delete outputHistory;
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZdlPvj>
		outputHistory = nullptr;
 414:	f8 01       	movw	r30, r16
 416:	16 82       	std	Z+6, r1	; 0x06
 418:	15 82       	std	Z+5, r1	; 0x05
	}
	outputHistoryLength = 0;
 41a:	d8 01       	movw	r26, r16
 41c:	14 96       	adiw	r26, 0x04	; 4
 41e:	1c 92       	st	X, r1
 420:	14 97       	sbiw	r26, 0x04	; 4
	
	equationLength = eqLength;
 422:	cc 93       	st	X, r28
	diffEquation = diffEq;
 424:	18 96       	adiw	r26, 0x08	; 8
 426:	fc 92       	st	X, r15
 428:	ee 92       	st	-X, r14
 42a:	17 97       	sbiw	r26, 0x07	; 7
	
	int16_t minExpo = 2;
	for(int i = 0; i < eqLength; i++) //Determine lowest exponent for X values
 42c:	cc 23       	and	r28, r28
 42e:	09 f4       	brne	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	40 c0       	rjmp	.+128    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 432:	f7 01       	movw	r30, r14
 434:	4c 2f       	mov	r20, r28
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	ea 01       	movw	r28, r20
 43a:	cc 0f       	add	r28, r28
 43c:	dd 1f       	adc	r29, r29
 43e:	cc 0f       	add	r28, r28
 440:	dd 1f       	adc	r29, r29
 442:	c4 0f       	add	r28, r20
 444:	d5 1f       	adc	r29, r21
 446:	b7 01       	movw	r22, r14
 448:	6c 0f       	add	r22, r28
 44a:	7d 1f       	adc	r23, r29
 44c:	22 e0       	ldi	r18, 0x02	; 2
 44e:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(!diffEquation[i].getIsOutput())
 450:	84 81       	ldd	r24, Z+4	; 0x04
 452:	81 11       	cpse	r24, r1
 454:	06 c0       	rjmp	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			return (float)coeffecient/100;
		}
		int16_t getExponent()
		{
			return exponent;
 456:	82 81       	ldd	r24, Z+2	; 0x02
 458:	93 81       	ldd	r25, Z+3	; 0x03
 45a:	82 17       	cp	r24, r18
 45c:	93 07       	cpc	r25, r19
 45e:	0c f4       	brge	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	9c 01       	movw	r18, r24
 462:	35 96       	adiw	r30, 0x05	; 5
	
	equationLength = eqLength;
	diffEquation = diffEq;
	
	int16_t minExpo = 2;
	for(int i = 0; i < eqLength; i++) //Determine lowest exponent for X values
 464:	6e 17       	cp	r22, r30
 466:	7f 07       	cpc	r23, r31
 468:	99 f7       	brne	.-26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 46a:	36 c0       	rjmp	.+108    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	memset(sampleHistory,0,newSampleHistoryLength);//Initial values should be 0
	
	minExpo = 2;
	for(int i = 0; i < eqLength; i++) //Determine lowest exponent for Y values
	{
		if(diffEquation[i].getIsOutput())
 46c:	84 81       	ldd	r24, Z+4	; 0x04
 46e:	88 23       	and	r24, r24
 470:	31 f0       	breq	.+12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 472:	82 81       	ldd	r24, Z+2	; 0x02
 474:	93 81       	ldd	r25, Z+3	; 0x03
 476:	82 17       	cp	r24, r18
 478:	93 07       	cpc	r25, r19
 47a:	0c f4       	brge	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	9c 01       	movw	r18, r24
 47e:	35 96       	adiw	r30, 0x05	; 5
	sampleHistory = new uint16_t[newSampleHistoryLength];
	
	memset(sampleHistory,0,newSampleHistoryLength);//Initial values should be 0
	
	minExpo = 2;
	for(int i = 0; i < eqLength; i++) //Determine lowest exponent for Y values
 480:	ec 17       	cp	r30, r28
 482:	fd 07       	cpc	r31, r29
 484:	99 f7       	brne	.-26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
				minExpo = expo;
			}
		}
	}
	
	uint8_t newOutputHistorylength = (minExpo * -1) + 1; //Flip sign
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	82 1b       	sub	r24, r18
	outputHistoryLength = newOutputHistorylength;
 48a:	f8 01       	movw	r30, r16
 48c:	84 83       	std	Z+4, r24	; 0x04
	outputHistory = new uint16_t[newOutputHistorylength];
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
 498:	d8 01       	movw	r26, r16
 49a:	16 96       	adiw	r26, 0x06	; 6
 49c:	9c 93       	st	X, r25
 49e:	8e 93       	st	-X, r24
 4a0:	15 97       	sbiw	r26, 0x05	; 5
	
	memset(outputHistory,0,outputHistoryLength);//Initial values should be 0
 4a2:	14 96       	adiw	r26, 0x04	; 4
 4a4:	4c 91       	ld	r20, X
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	0e 94 02 07 	call	0xe04	; 0xe04 <memset>
 4b0:	31 c0       	rjmp	.+98     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			}
		}
	}
	
	uint8_t newSampleHistoryLength = (minExpo * -1) + 1; //Flip sign
	sampleHistoryLength = newSampleHistoryLength;
 4b2:	cf ef       	ldi	r28, 0xFF	; 255
 4b4:	f8 01       	movw	r30, r16
 4b6:	c1 83       	std	Z+1, r28	; 0x01
	sampleHistory = new uint16_t[newSampleHistoryLength];
 4b8:	8e ef       	ldi	r24, 0xFE	; 254
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
 4c0:	d8 01       	movw	r26, r16
 4c2:	13 96       	adiw	r26, 0x03	; 3
 4c4:	9c 93       	st	X, r25
 4c6:	8e 93       	st	-X, r24
 4c8:	12 97       	sbiw	r26, 0x02	; 2
	
	memset(sampleHistory,0,newSampleHistoryLength);//Initial values should be 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	11 92       	st	Z+, r1
 4ce:	ca 95       	dec	r28
 4d0:	e9 f7       	brne	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	
	minExpo = 2;
 4d2:	22 e0       	ldi	r18, 0x02	; 2
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	d7 cf       	rjmp	.-82     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				minExpo = expo;
			}
		}
	}
	
	uint8_t newSampleHistoryLength = (minExpo * -1) + 1; //Flip sign
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	e8 2e       	mov	r14, r24
 4dc:	e2 1a       	sub	r14, r18
	sampleHistoryLength = newSampleHistoryLength;
 4de:	d8 01       	movw	r26, r16
 4e0:	11 96       	adiw	r26, 0x01	; 1
 4e2:	ec 92       	st	X, r14
	sampleHistory = new uint16_t[newSampleHistoryLength];
 4e4:	f1 2c       	mov	r15, r1
 4e6:	c7 01       	movw	r24, r14
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
 4f0:	f8 01       	movw	r30, r16
 4f2:	93 83       	std	Z+3, r25	; 0x03
 4f4:	82 83       	std	Z+2, r24	; 0x02
	
	memset(sampleHistory,0,newSampleHistoryLength);//Initial values should be 0
 4f6:	a7 01       	movw	r20, r14
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	0e 94 02 07 	call	0xe04	; 0xe04 <memset>
	
	minExpo = 2;
	for(int i = 0; i < eqLength; i++) //Determine lowest exponent for Y values
	{
		if(diffEquation[i].getIsOutput())
 500:	d8 01       	movw	r26, r16
 502:	17 96       	adiw	r26, 0x07	; 7
 504:	ed 91       	ld	r30, X+
 506:	fc 91       	ld	r31, X
 508:	18 97       	sbiw	r26, 0x08	; 8
 50a:	ce 0f       	add	r28, r30
 50c:	df 1f       	adc	r29, r31
 50e:	22 e0       	ldi	r18, 0x02	; 2
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	ac cf       	rjmp	.-168    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	uint8_t newOutputHistorylength = (minExpo * -1) + 1; //Flip sign
	outputHistoryLength = newOutputHistorylength;
	outputHistory = new uint16_t[newOutputHistorylength];
	
	memset(outputHistory,0,outputHistoryLength);//Initial values should be 0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	08 95       	ret

00000522 <_ZN3I2C6I2CBusC1Ev>:
 522:	88 e4       	ldi	r24, 0x48	; 72
 524:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 52e:	08 95       	ret

00000530 <_ZN3I2C6I2CBus18waitUntilAvailableEv>:
 530:	ec eb       	ldi	r30, 0xBC	; 188
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	88 23       	and	r24, r24
 538:	ec f7       	brge	.-6      	; 0x534 <_ZN3I2C6I2CBus18waitUntilAvailableEv+0x4>
 53a:	08 95       	ret

0000053c <_ZN3I2C6I2CBus14startConditionEv>:
 53c:	24 ea       	ldi	r18, 0xA4	; 164
 53e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 542:	0e 94 98 02 	call	0x530	; 0x530 <_ZN3I2C6I2CBus18waitUntilAvailableEv>
 546:	08 95       	ret

00000548 <_ZN3I2C6I2CBus13stopConditionEv>:
 548:	84 e9       	ldi	r24, 0x94	; 148
 54a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 54e:	08 95       	ret

00000550 <_ZN3I2C6I2CBus9writeDataEh>:
 550:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 554:	24 e8       	ldi	r18, 0x84	; 132
 556:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 55a:	0e 94 98 02 	call	0x530	; 0x530 <_ZN3I2C6I2CBus18waitUntilAvailableEv>
 55e:	08 95       	ret

00000560 <_ZN3I2C6I2CBus8readDataEb>:
 560:	20 e4       	ldi	r18, 0x40	; 64
 562:	62 9f       	mul	r22, r18
 564:	b0 01       	movw	r22, r0
 566:	11 24       	eor	r1, r1
 568:	64 68       	ori	r22, 0x84	; 132
 56a:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 56e:	0e 94 98 02 	call	0x530	; 0x530 <_ZN3I2C6I2CBus18waitUntilAvailableEv>
 572:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 576:	08 95       	ret

00000578 <main>:
uint8_t termAmount = 0;
uint8_t rxAmount = 0;

int main(void)
{	
	sei();
 578:	78 94       	sei
	
    while(1) 
    {
		dsp.processEquation();
 57a:	8a e0       	ldi	r24, 0x0A	; 10
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN3DSP7DSPUnit15processEquationEv>
 582:	fb cf       	rjmp	.-10     	; 0x57a <main+0x2>

00000584 <__vector_18>:
    }
}
ISR(USART_RX_vect)
{
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	af 92       	push	r10
 590:	bf 92       	push	r11
 592:	cf 92       	push	r12
 594:	df 92       	push	r13
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	4f 93       	push	r20
 5a4:	5f 93       	push	r21
 5a6:	6f 93       	push	r22
 5a8:	7f 93       	push	r23
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	af 93       	push	r26
 5b0:	bf 93       	push	r27
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
	uint8_t data = UDR0;
 5ba:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	if(termAmount == 0) //This byte will determine the length.
 5be:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <termAmount>
 5c2:	c1 11       	cpse	r28, r1
 5c4:	20 c0       	rjmp	.+64     	; 0x606 <__vector_18+0x82>
	{
		if(rxBuffer !=  nullptr)
 5c6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxBuffer>
 5ca:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rxBuffer+0x1>
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	41 f0       	breq	.+16     	; 0x5e2 <__vector_18+0x5e>
		{
			delete rxBuffer;
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZdlPvj>
			rxBuffer = nullptr;
 5da:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rxBuffer+0x1>
 5de:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rxBuffer>
		}
		
		termAmount = data;
 5e2:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <termAmount>
		rxBuffer = new uint8_t[termAmount*sizeof(Term)]; 
 5e6:	81 2f       	mov	r24, r17
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	9c 01       	movw	r18, r24
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	22 0f       	add	r18, r18
 5f2:	33 1f       	adc	r19, r19
 5f4:	82 0f       	add	r24, r18
 5f6:	93 1f       	adc	r25, r19
 5f8:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
 5fc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rxBuffer+0x1>
 600:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rxBuffer>
 604:	1a c0       	rjmp	.+52     	; 0x63a <__vector_18+0xb6>
	}
	else if(rxAmount != termAmount*sizeof(Term))//Keep adding bytes to buffer until length has been reached
 606:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 60a:	82 2f       	mov	r24, r18
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	d0 e0       	ldi	r29, 0x00	; 0
 610:	ae 01       	movw	r20, r28
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	44 0f       	add	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	4c 0f       	add	r20, r28
 61c:	5d 1f       	adc	r21, r29
 61e:	84 17       	cp	r24, r20
 620:	95 07       	cpc	r25, r21
 622:	e1 f0       	breq	.+56     	; 0x65c <__vector_18+0xd8>
	{
		rxBuffer[rxAmount++] = data;
 624:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <rxBuffer>
 628:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <rxBuffer+0x1>
 62c:	2f 5f       	subi	r18, 0xFF	; 255
 62e:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 632:	fa 01       	movw	r30, r20
 634:	e8 0f       	add	r30, r24
 636:	f9 1f       	adc	r31, r25
 638:	10 83       	st	Z, r17
	}
	if(rxAmount == termAmount*sizeof(Term)) //Whole message has been received
 63a:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <termAmount>
 63e:	d0 e0       	ldi	r29, 0x00	; 0
 640:	ce 01       	movw	r24, r28
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	8c 0f       	add	r24, r28
 64c:	9d 1f       	adc	r25, r29
 64e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	28 17       	cp	r18, r24
 656:	39 07       	cpc	r19, r25
 658:	09 f0       	breq	.+2      	; 0x65c <__vector_18+0xd8>
 65a:	7e c0       	rjmp	.+252    	; 0x758 <__vector_18+0x1d4>
	{		
		uint8_t cursor = 0;
		Term* equation = new Term[termAmount];
 65c:	0e 94 cc 03 	call	0x798	; 0x798 <_Znaj>
 660:	20 97       	sbiw	r28, 0x00	; 0
 662:	79 f4       	brne	.+30     	; 0x682 <__vector_18+0xfe>
		
		for(uint8_t i = 0; i < termAmount*sizeof(Term); i+=5)
 664:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <termAmount>
 668:	26 2f       	mov	r18, r22
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	62 0f       	add	r22, r18
 678:	73 1f       	adc	r23, r19
 67a:	61 15       	cp	r22, r1
 67c:	71 05       	cpc	r23, r1
 67e:	a9 f4       	brne	.+42     	; 0x6aa <__vector_18+0x126>
 680:	55 c0       	rjmp	.+170    	; 0x72c <__vector_18+0x1a8>
 682:	fc 01       	movw	r30, r24
 684:	9e 01       	movw	r18, r28
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	22 0f       	add	r18, r18
 68c:	33 1f       	adc	r19, r19
 68e:	c2 0f       	add	r28, r18
 690:	d3 1f       	adc	r29, r19
 692:	c8 0f       	add	r28, r24
 694:	d9 1f       	adc	r29, r25
		{
			this->coeffecient = coeffecient;
			this->exponent = exponent;
			this->isOutput = isOutput;
		}
		Term() {}
 696:	11 82       	std	Z+1, r1	; 0x01
 698:	10 82       	st	Z, r1
 69a:	13 82       	std	Z+3, r1	; 0x03
 69c:	12 82       	std	Z+2, r1	; 0x02
 69e:	14 82       	std	Z+4, r1	; 0x04
 6a0:	35 96       	adiw	r30, 0x05	; 5
		rxBuffer[rxAmount++] = data;
	}
	if(rxAmount == termAmount*sizeof(Term)) //Whole message has been received
	{		
		uint8_t cursor = 0;
		Term* equation = new Term[termAmount];
 6a2:	ce 17       	cp	r28, r30
 6a4:	df 07       	cpc	r29, r31
 6a6:	b9 f7       	brne	.-18     	; 0x696 <__vector_18+0x112>
 6a8:	dd cf       	rjmp	.-70     	; 0x664 <__vector_18+0xe0>
		
		for(uint8_t i = 0; i < termAmount*sizeof(Term); i+=5)
		{
			//Adjust equation
			int16_t coef = (uint16_t)rxBuffer[i] << 8 | rxBuffer[i+1];
 6aa:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <rxBuffer>
 6ae:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <rxBuffer+0x1>
 6b2:	a0 e0       	ldi	r26, 0x00	; 0
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	10 e0       	ldi	r17, 0x00	; 0
 6b8:	d1 2c       	mov	r13, r1
		public:
		Term(int16_t coeffecient, int16_t exponent, bool isOutput) 
		{
			this->coeffecient = coeffecient;
			this->exponent = exponent;
			this->isOutput = isOutput;
 6ba:	01 e0       	ldi	r16, 0x01	; 1
 6bc:	f1 2c       	mov	r15, r1
			int16_t expo = (uint16_t)rxBuffer[i+2] << 8 | rxBuffer[i+3];
 6be:	ae 01       	movw	r20, r28
 6c0:	4a 0f       	add	r20, r26
 6c2:	5b 1f       	adc	r21, r27
 6c4:	fa 01       	movw	r30, r20
 6c6:	22 81       	ldd	r18, Z+2	; 0x02
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	32 2f       	mov	r19, r18
 6cc:	22 27       	eor	r18, r18
 6ce:	e3 80       	ldd	r14, Z+3	; 0x03
 6d0:	2e 29       	or	r18, r14
 6d2:	e0 2e       	mov	r14, r16
 6d4:	44 81       	ldd	r20, Z+4	; 0x04
 6d6:	41 11       	cpse	r20, r1
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <__vector_18+0x158>
 6da:	ef 2c       	mov	r14, r15
			bool isOutput = rxBuffer[i+4] > 0;
			Term term = Term(coef,expo, isOutput);
			equation[cursor++] = term;
 6dc:	41 e0       	ldi	r20, 0x01	; 1
 6de:	4d 0d       	add	r20, r13
 6e0:	ed 2d       	mov	r30, r13
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	6f 01       	movw	r12, r30
 6e6:	cc 0c       	add	r12, r12
 6e8:	dd 1c       	adc	r13, r13
 6ea:	cc 0c       	add	r12, r12
 6ec:	dd 1c       	adc	r13, r13
 6ee:	ec 0d       	add	r30, r12
 6f0:	fd 1d       	adc	r31, r13
 6f2:	e8 0f       	add	r30, r24
 6f4:	f9 1f       	adc	r31, r25
		Term* equation = new Term[termAmount];
		
		for(uint8_t i = 0; i < termAmount*sizeof(Term); i+=5)
		{
			//Adjust equation
			int16_t coef = (uint16_t)rxBuffer[i] << 8 | rxBuffer[i+1];
 6f6:	6e 01       	movw	r12, r28
 6f8:	ca 0e       	add	r12, r26
 6fa:	db 1e       	adc	r13, r27
			int16_t expo = (uint16_t)rxBuffer[i+2] << 8 | rxBuffer[i+3];
			bool isOutput = rxBuffer[i+4] > 0;
			Term term = Term(coef,expo, isOutput);
			equation[cursor++] = term;
 6fc:	d6 01       	movw	r26, r12
 6fe:	5c 91       	ld	r21, X
 700:	a5 2f       	mov	r26, r21
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	ba 2e       	mov	r11, r26
 706:	aa 24       	eor	r10, r10
 708:	d6 01       	movw	r26, r12
 70a:	11 96       	adiw	r26, 0x01	; 1
 70c:	5c 91       	ld	r21, X
 70e:	d5 01       	movw	r26, r10
 710:	a5 2b       	or	r26, r21
 712:	b1 83       	std	Z+1, r27	; 0x01
 714:	a0 83       	st	Z, r26
 716:	33 83       	std	Z+3, r19	; 0x03
 718:	22 83       	std	Z+2, r18	; 0x02
 71a:	e4 82       	std	Z+4, r14	; 0x04
	if(rxAmount == termAmount*sizeof(Term)) //Whole message has been received
	{		
		uint8_t cursor = 0;
		Term* equation = new Term[termAmount];
		
		for(uint8_t i = 0; i < termAmount*sizeof(Term); i+=5)
 71c:	1b 5f       	subi	r17, 0xFB	; 251
 71e:	a1 2f       	mov	r26, r17
 720:	b0 e0       	ldi	r27, 0x00	; 0
			//Adjust equation
			int16_t coef = (uint16_t)rxBuffer[i] << 8 | rxBuffer[i+1];
			int16_t expo = (uint16_t)rxBuffer[i+2] << 8 | rxBuffer[i+3];
			bool isOutput = rxBuffer[i+4] > 0;
			Term term = Term(coef,expo, isOutput);
			equation[cursor++] = term;
 722:	d4 2e       	mov	r13, r20
	if(rxAmount == termAmount*sizeof(Term)) //Whole message has been received
	{		
		uint8_t cursor = 0;
		Term* equation = new Term[termAmount];
		
		for(uint8_t i = 0; i < termAmount*sizeof(Term); i+=5)
 724:	a6 17       	cp	r26, r22
 726:	b7 07       	cpc	r27, r23
 728:	50 f2       	brcs	.-108    	; 0x6be <__vector_18+0x13a>
 72a:	01 c0       	rjmp	.+2      	; 0x72e <__vector_18+0x1aa>
 72c:	40 e0       	ldi	r20, 0x00	; 0
			bool isOutput = rxBuffer[i+4] > 0;
			Term term = Term(coef,expo, isOutput);
			equation[cursor++] = term;
		}
		
		dsp.setDifferenceEquation(equation, cursor);
 72e:	bc 01       	movw	r22, r24
 730:	8a e0       	ldi	r24, 0x0A	; 10
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN3DSP7DSPUnit21setDifferenceEquationEPNS_4TermEh>
			
		termAmount = 0;
 738:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <termAmount>
		rxAmount = 0;
 73c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		delete rxBuffer;
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rxBuffer>
 748:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rxBuffer+0x1>
 74c:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZdlPvj>
		rxBuffer = nullptr;
 750:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rxBuffer+0x1>
 754:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rxBuffer>
	}
}
 758:	ff 91       	pop	r31
 75a:	ef 91       	pop	r30
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	bf 91       	pop	r27
 762:	af 91       	pop	r26
 764:	9f 91       	pop	r25
 766:	8f 91       	pop	r24
 768:	7f 91       	pop	r23
 76a:	6f 91       	pop	r22
 76c:	5f 91       	pop	r21
 76e:	4f 91       	pop	r20
 770:	3f 91       	pop	r19
 772:	2f 91       	pop	r18
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	df 90       	pop	r13
 77e:	cf 90       	pop	r12
 780:	bf 90       	pop	r11
 782:	af 90       	pop	r10
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <_GLOBAL__sub_I_dsp>:
#include "Utility/Debug.hpp"

using namespace I2C;
using namespace DSP;

DSPUnit dsp = DSPUnit(); //I2C initialized in constructor
 78e:	8a e0       	ldi	r24, 0x0A	; 10
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN3DSP7DSPUnitC1Ev>
 796:	08 95       	ret

00000798 <_Znaj>:
#endif
}

inline void deallocate(void* ptr, unsigned int size)
{
	free(ptr);
 798:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <malloc>
 79c:	08 95       	ret

0000079e <_ZdlPvj>:
 79e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <free>
 7a2:	08 95       	ret

000007a4 <__subsf3>:
 7a4:	50 58       	subi	r21, 0x80	; 128

000007a6 <__addsf3>:
 7a6:	bb 27       	eor	r27, r27
 7a8:	aa 27       	eor	r26, r26
 7aa:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3x>
 7ae:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>
 7b2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
 7b6:	38 f0       	brcs	.+14     	; 0x7c6 <__addsf3+0x20>
 7b8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
 7bc:	20 f0       	brcs	.+8      	; 0x7c6 <__addsf3+0x20>
 7be:	39 f4       	brne	.+14     	; 0x7ce <__addsf3+0x28>
 7c0:	9f 3f       	cpi	r25, 0xFF	; 255
 7c2:	19 f4       	brne	.+6      	; 0x7ca <__addsf3+0x24>
 7c4:	26 f4       	brtc	.+8      	; 0x7ce <__addsf3+0x28>
 7c6:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
 7ca:	0e f4       	brtc	.+2      	; 0x7ce <__addsf3+0x28>
 7cc:	e0 95       	com	r30
 7ce:	e7 fb       	bst	r30, 7
 7d0:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_inf>

000007d4 <__addsf3x>:
 7d4:	e9 2f       	mov	r30, r25
 7d6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
 7da:	58 f3       	brcs	.-42     	; 0x7b2 <__addsf3+0xc>
 7dc:	ba 17       	cp	r27, r26
 7de:	62 07       	cpc	r22, r18
 7e0:	73 07       	cpc	r23, r19
 7e2:	84 07       	cpc	r24, r20
 7e4:	95 07       	cpc	r25, r21
 7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__addsf3x+0x1c>
 7e8:	79 f4       	brne	.+30     	; 0x808 <__addsf3x+0x34>
 7ea:	a6 f5       	brtc	.+104    	; 0x854 <__addsf3x+0x80>
 7ec:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_zero>
 7f0:	0e f4       	brtc	.+2      	; 0x7f4 <__addsf3x+0x20>
 7f2:	e0 95       	com	r30
 7f4:	0b 2e       	mov	r0, r27
 7f6:	ba 2f       	mov	r27, r26
 7f8:	a0 2d       	mov	r26, r0
 7fa:	0b 01       	movw	r0, r22
 7fc:	b9 01       	movw	r22, r18
 7fe:	90 01       	movw	r18, r0
 800:	0c 01       	movw	r0, r24
 802:	ca 01       	movw	r24, r20
 804:	a0 01       	movw	r20, r0
 806:	11 24       	eor	r1, r1
 808:	ff 27       	eor	r31, r31
 80a:	59 1b       	sub	r21, r25
 80c:	99 f0       	breq	.+38     	; 0x834 <__addsf3x+0x60>
 80e:	59 3f       	cpi	r21, 0xF9	; 249
 810:	50 f4       	brcc	.+20     	; 0x826 <__addsf3x+0x52>
 812:	50 3e       	cpi	r21, 0xE0	; 224
 814:	68 f1       	brcs	.+90     	; 0x870 <__addsf3x+0x9c>
 816:	1a 16       	cp	r1, r26
 818:	f0 40       	sbci	r31, 0x00	; 0
 81a:	a2 2f       	mov	r26, r18
 81c:	23 2f       	mov	r18, r19
 81e:	34 2f       	mov	r19, r20
 820:	44 27       	eor	r20, r20
 822:	58 5f       	subi	r21, 0xF8	; 248
 824:	f3 cf       	rjmp	.-26     	; 0x80c <__addsf3x+0x38>
 826:	46 95       	lsr	r20
 828:	37 95       	ror	r19
 82a:	27 95       	ror	r18
 82c:	a7 95       	ror	r26
 82e:	f0 40       	sbci	r31, 0x00	; 0
 830:	53 95       	inc	r21
 832:	c9 f7       	brne	.-14     	; 0x826 <__addsf3x+0x52>
 834:	7e f4       	brtc	.+30     	; 0x854 <__addsf3x+0x80>
 836:	1f 16       	cp	r1, r31
 838:	ba 0b       	sbc	r27, r26
 83a:	62 0b       	sbc	r22, r18
 83c:	73 0b       	sbc	r23, r19
 83e:	84 0b       	sbc	r24, r20
 840:	ba f0       	brmi	.+46     	; 0x870 <__addsf3x+0x9c>
 842:	91 50       	subi	r25, 0x01	; 1
 844:	a1 f0       	breq	.+40     	; 0x86e <__addsf3x+0x9a>
 846:	ff 0f       	add	r31, r31
 848:	bb 1f       	adc	r27, r27
 84a:	66 1f       	adc	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	c2 f7       	brpl	.-16     	; 0x842 <__addsf3x+0x6e>
 852:	0e c0       	rjmp	.+28     	; 0x870 <__addsf3x+0x9c>
 854:	ba 0f       	add	r27, r26
 856:	62 1f       	adc	r22, r18
 858:	73 1f       	adc	r23, r19
 85a:	84 1f       	adc	r24, r20
 85c:	48 f4       	brcc	.+18     	; 0x870 <__addsf3x+0x9c>
 85e:	87 95       	ror	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	b7 95       	ror	r27
 866:	f7 95       	ror	r31
 868:	9e 3f       	cpi	r25, 0xFE	; 254
 86a:	08 f0       	brcs	.+2      	; 0x86e <__addsf3x+0x9a>
 86c:	b0 cf       	rjmp	.-160    	; 0x7ce <__addsf3+0x28>
 86e:	93 95       	inc	r25
 870:	88 0f       	add	r24, r24
 872:	08 f0       	brcs	.+2      	; 0x876 <__addsf3x+0xa2>
 874:	99 27       	eor	r25, r25
 876:	ee 0f       	add	r30, r30
 878:	97 95       	ror	r25
 87a:	87 95       	ror	r24
 87c:	08 95       	ret

0000087e <__divsf3>:
 87e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3x>
 882:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>
 886:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
 88a:	58 f0       	brcs	.+22     	; 0x8a2 <__divsf3+0x24>
 88c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
 890:	40 f0       	brcs	.+16     	; 0x8a2 <__divsf3+0x24>
 892:	29 f4       	brne	.+10     	; 0x89e <__divsf3+0x20>
 894:	5f 3f       	cpi	r21, 0xFF	; 255
 896:	29 f0       	breq	.+10     	; 0x8a2 <__divsf3+0x24>
 898:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_inf>
 89c:	51 11       	cpse	r21, r1
 89e:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
 8a2:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>

000008a6 <__divsf3x>:
 8a6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
 8aa:	68 f3       	brcs	.-38     	; 0x886 <__divsf3+0x8>

000008ac <__divsf3_pse>:
 8ac:	99 23       	and	r25, r25
 8ae:	b1 f3       	breq	.-20     	; 0x89c <__divsf3+0x1e>
 8b0:	55 23       	and	r21, r21
 8b2:	91 f3       	breq	.-28     	; 0x898 <__divsf3+0x1a>
 8b4:	95 1b       	sub	r25, r21
 8b6:	55 0b       	sbc	r21, r21
 8b8:	bb 27       	eor	r27, r27
 8ba:	aa 27       	eor	r26, r26
 8bc:	62 17       	cp	r22, r18
 8be:	73 07       	cpc	r23, r19
 8c0:	84 07       	cpc	r24, r20
 8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__divsf3_pse+0x26>
 8c4:	9f 5f       	subi	r25, 0xFF	; 255
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	44 1f       	adc	r20, r20
 8ce:	aa 1f       	adc	r26, r26
 8d0:	a9 f3       	breq	.-22     	; 0x8bc <__divsf3_pse+0x10>
 8d2:	35 d0       	rcall	.+106    	; 0x93e <__stack+0x3f>
 8d4:	0e 2e       	mov	r0, r30
 8d6:	3a f0       	brmi	.+14     	; 0x8e6 <__divsf3_pse+0x3a>
 8d8:	e0 e8       	ldi	r30, 0x80	; 128
 8da:	32 d0       	rcall	.+100    	; 0x940 <__stack+0x41>
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	e6 95       	lsr	r30
 8e2:	00 1c       	adc	r0, r0
 8e4:	ca f7       	brpl	.-14     	; 0x8d8 <__divsf3_pse+0x2c>
 8e6:	2b d0       	rcall	.+86     	; 0x93e <__stack+0x3f>
 8e8:	fe 2f       	mov	r31, r30
 8ea:	29 d0       	rcall	.+82     	; 0x93e <__stack+0x3f>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	bb 1f       	adc	r27, r27
 8f4:	26 17       	cp	r18, r22
 8f6:	37 07       	cpc	r19, r23
 8f8:	48 07       	cpc	r20, r24
 8fa:	ab 07       	cpc	r26, r27
 8fc:	b0 e8       	ldi	r27, 0x80	; 128
 8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0x3>
 900:	bb 0b       	sbc	r27, r27
 902:	80 2d       	mov	r24, r0
 904:	bf 01       	movw	r22, r30
 906:	ff 27       	eor	r31, r31
 908:	93 58       	subi	r25, 0x83	; 131
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	3a f0       	brmi	.+14     	; 0x91c <__stack+0x1d>
 90e:	9e 3f       	cpi	r25, 0xFE	; 254
 910:	51 05       	cpc	r21, r1
 912:	78 f0       	brcs	.+30     	; 0x932 <__stack+0x33>
 914:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_inf>
 918:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
 91c:	5f 3f       	cpi	r21, 0xFF	; 255
 91e:	e4 f3       	brlt	.-8      	; 0x918 <__stack+0x19>
 920:	98 3e       	cpi	r25, 0xE8	; 232
 922:	d4 f3       	brlt	.-12     	; 0x918 <__stack+0x19>
 924:	86 95       	lsr	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	b7 95       	ror	r27
 92c:	f7 95       	ror	r31
 92e:	9f 5f       	subi	r25, 0xFF	; 255
 930:	c9 f7       	brne	.-14     	; 0x924 <__stack+0x25>
 932:	88 0f       	add	r24, r24
 934:	91 1d       	adc	r25, r1
 936:	96 95       	lsr	r25
 938:	87 95       	ror	r24
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret
 93e:	e1 e0       	ldi	r30, 0x01	; 1
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	bb 1f       	adc	r27, r27
 948:	62 17       	cp	r22, r18
 94a:	73 07       	cpc	r23, r19
 94c:	84 07       	cpc	r24, r20
 94e:	ba 07       	cpc	r27, r26
 950:	20 f0       	brcs	.+8      	; 0x95a <__stack+0x5b>
 952:	62 1b       	sub	r22, r18
 954:	73 0b       	sbc	r23, r19
 956:	84 0b       	sbc	r24, r20
 958:	ba 0b       	sbc	r27, r26
 95a:	ee 1f       	adc	r30, r30
 95c:	88 f7       	brcc	.-30     	; 0x940 <__stack+0x41>
 95e:	e0 95       	com	r30
 960:	08 95       	ret

00000962 <__fixunssfsi>:
 962:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_splitA>
 966:	88 f0       	brcs	.+34     	; 0x98a <__fixunssfsi+0x28>
 968:	9f 57       	subi	r25, 0x7F	; 127
 96a:	98 f0       	brcs	.+38     	; 0x992 <__fixunssfsi+0x30>
 96c:	b9 2f       	mov	r27, r25
 96e:	99 27       	eor	r25, r25
 970:	b7 51       	subi	r27, 0x17	; 23
 972:	b0 f0       	brcs	.+44     	; 0x9a0 <__fixunssfsi+0x3e>
 974:	e1 f0       	breq	.+56     	; 0x9ae <__fixunssfsi+0x4c>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	1a f0       	brmi	.+6      	; 0x986 <__fixunssfsi+0x24>
 980:	ba 95       	dec	r27
 982:	c9 f7       	brne	.-14     	; 0x976 <__fixunssfsi+0x14>
 984:	14 c0       	rjmp	.+40     	; 0x9ae <__fixunssfsi+0x4c>
 986:	b1 30       	cpi	r27, 0x01	; 1
 988:	91 f0       	breq	.+36     	; 0x9ae <__fixunssfsi+0x4c>
 98a:	0e 94 67 05 	call	0xace	; 0xace <__fp_zero>
 98e:	b1 e0       	ldi	r27, 0x01	; 1
 990:	08 95       	ret
 992:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_zero>
 996:	67 2f       	mov	r22, r23
 998:	78 2f       	mov	r23, r24
 99a:	88 27       	eor	r24, r24
 99c:	b8 5f       	subi	r27, 0xF8	; 248
 99e:	39 f0       	breq	.+14     	; 0x9ae <__fixunssfsi+0x4c>
 9a0:	b9 3f       	cpi	r27, 0xF9	; 249
 9a2:	cc f3       	brlt	.-14     	; 0x996 <__fixunssfsi+0x34>
 9a4:	86 95       	lsr	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b3 95       	inc	r27
 9ac:	d9 f7       	brne	.-10     	; 0x9a4 <__fixunssfsi+0x42>
 9ae:	3e f4       	brtc	.+14     	; 0x9be <__fixunssfsi+0x5c>
 9b0:	90 95       	com	r25
 9b2:	80 95       	com	r24
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__floatunsisf>:
 9c0:	e8 94       	clt
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <__floatsisf+0x12>

000009c4 <__floatsisf>:
 9c4:	97 fb       	bst	r25, 7
 9c6:	3e f4       	brtc	.+14     	; 0x9d6 <__floatsisf+0x12>
 9c8:	90 95       	com	r25
 9ca:	80 95       	com	r24
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	99 23       	and	r25, r25
 9d8:	a9 f0       	breq	.+42     	; 0xa04 <__floatsisf+0x40>
 9da:	f9 2f       	mov	r31, r25
 9dc:	96 e9       	ldi	r25, 0x96	; 150
 9de:	bb 27       	eor	r27, r27
 9e0:	93 95       	inc	r25
 9e2:	f6 95       	lsr	r31
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f1 11       	cpse	r31, r1
 9ee:	f8 cf       	rjmp	.-16     	; 0x9e0 <__floatsisf+0x1c>
 9f0:	fa f4       	brpl	.+62     	; 0xa30 <__floatsisf+0x6c>
 9f2:	bb 0f       	add	r27, r27
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__floatsisf+0x36>
 9f6:	60 ff       	sbrs	r22, 0
 9f8:	1b c0       	rjmp	.+54     	; 0xa30 <__floatsisf+0x6c>
 9fa:	6f 5f       	subi	r22, 0xFF	; 255
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	16 c0       	rjmp	.+44     	; 0xa30 <__floatsisf+0x6c>
 a04:	88 23       	and	r24, r24
 a06:	11 f0       	breq	.+4      	; 0xa0c <__floatsisf+0x48>
 a08:	96 e9       	ldi	r25, 0x96	; 150
 a0a:	11 c0       	rjmp	.+34     	; 0xa2e <__floatsisf+0x6a>
 a0c:	77 23       	and	r23, r23
 a0e:	21 f0       	breq	.+8      	; 0xa18 <__floatsisf+0x54>
 a10:	9e e8       	ldi	r25, 0x8E	; 142
 a12:	87 2f       	mov	r24, r23
 a14:	76 2f       	mov	r23, r22
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <__floatsisf+0x5e>
 a18:	66 23       	and	r22, r22
 a1a:	71 f0       	breq	.+28     	; 0xa38 <__floatsisf+0x74>
 a1c:	96 e8       	ldi	r25, 0x86	; 134
 a1e:	86 2f       	mov	r24, r22
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	2a f0       	brmi	.+10     	; 0xa30 <__floatsisf+0x6c>
 a26:	9a 95       	dec	r25
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	da f7       	brpl	.-10     	; 0xa26 <__floatsisf+0x62>
 a30:	88 0f       	add	r24, r24
 a32:	96 95       	lsr	r25
 a34:	87 95       	ror	r24
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret

00000a3a <__fp_inf>:
 a3a:	97 f9       	bld	r25, 7
 a3c:	9f 67       	ori	r25, 0x7F	; 127
 a3e:	80 e8       	ldi	r24, 0x80	; 128
 a40:	70 e0       	ldi	r23, 0x00	; 0
 a42:	60 e0       	ldi	r22, 0x00	; 0
 a44:	08 95       	ret

00000a46 <__fp_nan>:
 a46:	9f ef       	ldi	r25, 0xFF	; 255
 a48:	80 ec       	ldi	r24, 0xC0	; 192
 a4a:	08 95       	ret

00000a4c <__fp_pscA>:
 a4c:	00 24       	eor	r0, r0
 a4e:	0a 94       	dec	r0
 a50:	16 16       	cp	r1, r22
 a52:	17 06       	cpc	r1, r23
 a54:	18 06       	cpc	r1, r24
 a56:	09 06       	cpc	r0, r25
 a58:	08 95       	ret

00000a5a <__fp_pscB>:
 a5a:	00 24       	eor	r0, r0
 a5c:	0a 94       	dec	r0
 a5e:	12 16       	cp	r1, r18
 a60:	13 06       	cpc	r1, r19
 a62:	14 06       	cpc	r1, r20
 a64:	05 06       	cpc	r0, r21
 a66:	08 95       	ret

00000a68 <__fp_round>:
 a68:	09 2e       	mov	r0, r25
 a6a:	03 94       	inc	r0
 a6c:	00 0c       	add	r0, r0
 a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_round+0xc>
 a70:	88 23       	and	r24, r24
 a72:	52 f0       	brmi	.+20     	; 0xa88 <__fp_round+0x20>
 a74:	bb 0f       	add	r27, r27
 a76:	40 f4       	brcc	.+16     	; 0xa88 <__fp_round+0x20>
 a78:	bf 2b       	or	r27, r31
 a7a:	11 f4       	brne	.+4      	; 0xa80 <__fp_round+0x18>
 a7c:	60 ff       	sbrs	r22, 0
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__fp_round+0x20>
 a80:	6f 5f       	subi	r22, 0xFF	; 255
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__fp_split3>:
 a8a:	57 fd       	sbrc	r21, 7
 a8c:	90 58       	subi	r25, 0x80	; 128
 a8e:	44 0f       	add	r20, r20
 a90:	55 1f       	adc	r21, r21
 a92:	59 f0       	breq	.+22     	; 0xaaa <__fp_splitA+0x10>
 a94:	5f 3f       	cpi	r21, 0xFF	; 255
 a96:	71 f0       	breq	.+28     	; 0xab4 <__fp_splitA+0x1a>
 a98:	47 95       	ror	r20

00000a9a <__fp_splitA>:
 a9a:	88 0f       	add	r24, r24
 a9c:	97 fb       	bst	r25, 7
 a9e:	99 1f       	adc	r25, r25
 aa0:	61 f0       	breq	.+24     	; 0xaba <__fp_splitA+0x20>
 aa2:	9f 3f       	cpi	r25, 0xFF	; 255
 aa4:	79 f0       	breq	.+30     	; 0xac4 <__fp_splitA+0x2a>
 aa6:	87 95       	ror	r24
 aa8:	08 95       	ret
 aaa:	12 16       	cp	r1, r18
 aac:	13 06       	cpc	r1, r19
 aae:	14 06       	cpc	r1, r20
 ab0:	55 1f       	adc	r21, r21
 ab2:	f2 cf       	rjmp	.-28     	; 0xa98 <__fp_split3+0xe>
 ab4:	46 95       	lsr	r20
 ab6:	f1 df       	rcall	.-30     	; 0xa9a <__fp_splitA>
 ab8:	08 c0       	rjmp	.+16     	; 0xaca <__fp_splitA+0x30>
 aba:	16 16       	cp	r1, r22
 abc:	17 06       	cpc	r1, r23
 abe:	18 06       	cpc	r1, r24
 ac0:	99 1f       	adc	r25, r25
 ac2:	f1 cf       	rjmp	.-30     	; 0xaa6 <__fp_splitA+0xc>
 ac4:	86 95       	lsr	r24
 ac6:	71 05       	cpc	r23, r1
 ac8:	61 05       	cpc	r22, r1
 aca:	08 94       	sec
 acc:	08 95       	ret

00000ace <__fp_zero>:
 ace:	e8 94       	clt

00000ad0 <__fp_szero>:
 ad0:	bb 27       	eor	r27, r27
 ad2:	66 27       	eor	r22, r22
 ad4:	77 27       	eor	r23, r23
 ad6:	cb 01       	movw	r24, r22
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret

00000adc <__mulsf3>:
 adc:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3x>
 ae0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>
 ae4:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
 ae8:	38 f0       	brcs	.+14     	; 0xaf8 <__mulsf3+0x1c>
 aea:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <__mulsf3+0x1c>
 af0:	95 23       	and	r25, r21
 af2:	11 f0       	breq	.+4      	; 0xaf8 <__mulsf3+0x1c>
 af4:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_inf>
 af8:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
 afc:	11 24       	eor	r1, r1
 afe:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>

00000b02 <__mulsf3x>:
 b02:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
 b06:	70 f3       	brcs	.-36     	; 0xae4 <__mulsf3+0x8>

00000b08 <__mulsf3_pse>:
 b08:	95 9f       	mul	r25, r21
 b0a:	c1 f3       	breq	.-16     	; 0xafc <__mulsf3+0x20>
 b0c:	95 0f       	add	r25, r21
 b0e:	50 e0       	ldi	r21, 0x00	; 0
 b10:	55 1f       	adc	r21, r21
 b12:	62 9f       	mul	r22, r18
 b14:	f0 01       	movw	r30, r0
 b16:	72 9f       	mul	r23, r18
 b18:	bb 27       	eor	r27, r27
 b1a:	f0 0d       	add	r31, r0
 b1c:	b1 1d       	adc	r27, r1
 b1e:	63 9f       	mul	r22, r19
 b20:	aa 27       	eor	r26, r26
 b22:	f0 0d       	add	r31, r0
 b24:	b1 1d       	adc	r27, r1
 b26:	aa 1f       	adc	r26, r26
 b28:	64 9f       	mul	r22, r20
 b2a:	66 27       	eor	r22, r22
 b2c:	b0 0d       	add	r27, r0
 b2e:	a1 1d       	adc	r26, r1
 b30:	66 1f       	adc	r22, r22
 b32:	82 9f       	mul	r24, r18
 b34:	22 27       	eor	r18, r18
 b36:	b0 0d       	add	r27, r0
 b38:	a1 1d       	adc	r26, r1
 b3a:	62 1f       	adc	r22, r18
 b3c:	73 9f       	mul	r23, r19
 b3e:	b0 0d       	add	r27, r0
 b40:	a1 1d       	adc	r26, r1
 b42:	62 1f       	adc	r22, r18
 b44:	83 9f       	mul	r24, r19
 b46:	a0 0d       	add	r26, r0
 b48:	61 1d       	adc	r22, r1
 b4a:	22 1f       	adc	r18, r18
 b4c:	74 9f       	mul	r23, r20
 b4e:	33 27       	eor	r19, r19
 b50:	a0 0d       	add	r26, r0
 b52:	61 1d       	adc	r22, r1
 b54:	23 1f       	adc	r18, r19
 b56:	84 9f       	mul	r24, r20
 b58:	60 0d       	add	r22, r0
 b5a:	21 1d       	adc	r18, r1
 b5c:	82 2f       	mov	r24, r18
 b5e:	76 2f       	mov	r23, r22
 b60:	6a 2f       	mov	r22, r26
 b62:	11 24       	eor	r1, r1
 b64:	9f 57       	subi	r25, 0x7F	; 127
 b66:	50 40       	sbci	r21, 0x00	; 0
 b68:	9a f0       	brmi	.+38     	; 0xb90 <__mulsf3_pse+0x88>
 b6a:	f1 f0       	breq	.+60     	; 0xba8 <__mulsf3_pse+0xa0>
 b6c:	88 23       	and	r24, r24
 b6e:	4a f0       	brmi	.+18     	; 0xb82 <__mulsf3_pse+0x7a>
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	bb 1f       	adc	r27, r27
 b76:	66 1f       	adc	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	91 50       	subi	r25, 0x01	; 1
 b7e:	50 40       	sbci	r21, 0x00	; 0
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__mulsf3_pse+0x64>
 b82:	9e 3f       	cpi	r25, 0xFE	; 254
 b84:	51 05       	cpc	r21, r1
 b86:	80 f0       	brcs	.+32     	; 0xba8 <__mulsf3_pse+0xa0>
 b88:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_inf>
 b8c:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
 b90:	5f 3f       	cpi	r21, 0xFF	; 255
 b92:	e4 f3       	brlt	.-8      	; 0xb8c <__mulsf3_pse+0x84>
 b94:	98 3e       	cpi	r25, 0xE8	; 232
 b96:	d4 f3       	brlt	.-12     	; 0xb8c <__mulsf3_pse+0x84>
 b98:	86 95       	lsr	r24
 b9a:	77 95       	ror	r23
 b9c:	67 95       	ror	r22
 b9e:	b7 95       	ror	r27
 ba0:	f7 95       	ror	r31
 ba2:	e7 95       	ror	r30
 ba4:	9f 5f       	subi	r25, 0xFF	; 255
 ba6:	c1 f7       	brne	.-16     	; 0xb98 <__mulsf3_pse+0x90>
 ba8:	fe 2b       	or	r31, r30
 baa:	88 0f       	add	r24, r24
 bac:	91 1d       	adc	r25, r1
 bae:	96 95       	lsr	r25
 bb0:	87 95       	ror	r24
 bb2:	97 f9       	bld	r25, 7
 bb4:	08 95       	ret

00000bb6 <__tablejump2__>:
 bb6:	ee 0f       	add	r30, r30
 bb8:	ff 1f       	adc	r31, r31
 bba:	05 90       	lpm	r0, Z+
 bbc:	f4 91       	lpm	r31, Z
 bbe:	e0 2d       	mov	r30, r0
 bc0:	09 94       	ijmp

00000bc2 <malloc>:
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
 bca:	82 30       	cpi	r24, 0x02	; 2
 bcc:	91 05       	cpc	r25, r1
 bce:	10 f4       	brcc	.+4      	; 0xbd4 <malloc+0x12>
 bd0:	82 e0       	ldi	r24, 0x02	; 2
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <__flp>
 bd8:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <__flp+0x1>
 bdc:	20 e0       	ldi	r18, 0x00	; 0
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	a0 e0       	ldi	r26, 0x00	; 0
 be2:	b0 e0       	ldi	r27, 0x00	; 0
 be4:	30 97       	sbiw	r30, 0x00	; 0
 be6:	19 f1       	breq	.+70     	; 0xc2e <malloc+0x6c>
 be8:	40 81       	ld	r20, Z
 bea:	51 81       	ldd	r21, Z+1	; 0x01
 bec:	02 81       	ldd	r16, Z+2	; 0x02
 bee:	13 81       	ldd	r17, Z+3	; 0x03
 bf0:	48 17       	cp	r20, r24
 bf2:	59 07       	cpc	r21, r25
 bf4:	c8 f0       	brcs	.+50     	; 0xc28 <malloc+0x66>
 bf6:	84 17       	cp	r24, r20
 bf8:	95 07       	cpc	r25, r21
 bfa:	69 f4       	brne	.+26     	; 0xc16 <malloc+0x54>
 bfc:	10 97       	sbiw	r26, 0x00	; 0
 bfe:	31 f0       	breq	.+12     	; 0xc0c <malloc+0x4a>
 c00:	12 96       	adiw	r26, 0x02	; 2
 c02:	0c 93       	st	X, r16
 c04:	12 97       	sbiw	r26, 0x02	; 2
 c06:	13 96       	adiw	r26, 0x03	; 3
 c08:	1c 93       	st	X, r17
 c0a:	27 c0       	rjmp	.+78     	; 0xc5a <malloc+0x98>
 c0c:	00 93 15 01 	sts	0x0115, r16	; 0x800115 <__flp>
 c10:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <__flp+0x1>
 c14:	22 c0       	rjmp	.+68     	; 0xc5a <malloc+0x98>
 c16:	21 15       	cp	r18, r1
 c18:	31 05       	cpc	r19, r1
 c1a:	19 f0       	breq	.+6      	; 0xc22 <malloc+0x60>
 c1c:	42 17       	cp	r20, r18
 c1e:	53 07       	cpc	r21, r19
 c20:	18 f4       	brcc	.+6      	; 0xc28 <malloc+0x66>
 c22:	9a 01       	movw	r18, r20
 c24:	bd 01       	movw	r22, r26
 c26:	ef 01       	movw	r28, r30
 c28:	df 01       	movw	r26, r30
 c2a:	f8 01       	movw	r30, r16
 c2c:	db cf       	rjmp	.-74     	; 0xbe4 <malloc+0x22>
 c2e:	21 15       	cp	r18, r1
 c30:	31 05       	cpc	r19, r1
 c32:	f9 f0       	breq	.+62     	; 0xc72 <malloc+0xb0>
 c34:	28 1b       	sub	r18, r24
 c36:	39 0b       	sbc	r19, r25
 c38:	24 30       	cpi	r18, 0x04	; 4
 c3a:	31 05       	cpc	r19, r1
 c3c:	80 f4       	brcc	.+32     	; 0xc5e <malloc+0x9c>
 c3e:	8a 81       	ldd	r24, Y+2	; 0x02
 c40:	9b 81       	ldd	r25, Y+3	; 0x03
 c42:	61 15       	cp	r22, r1
 c44:	71 05       	cpc	r23, r1
 c46:	21 f0       	breq	.+8      	; 0xc50 <malloc+0x8e>
 c48:	fb 01       	movw	r30, r22
 c4a:	93 83       	std	Z+3, r25	; 0x03
 c4c:	82 83       	std	Z+2, r24	; 0x02
 c4e:	04 c0       	rjmp	.+8      	; 0xc58 <malloc+0x96>
 c50:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__flp+0x1>
 c54:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <__flp>
 c58:	fe 01       	movw	r30, r28
 c5a:	32 96       	adiw	r30, 0x02	; 2
 c5c:	44 c0       	rjmp	.+136    	; 0xce6 <malloc+0x124>
 c5e:	fe 01       	movw	r30, r28
 c60:	e2 0f       	add	r30, r18
 c62:	f3 1f       	adc	r31, r19
 c64:	81 93       	st	Z+, r24
 c66:	91 93       	st	Z+, r25
 c68:	22 50       	subi	r18, 0x02	; 2
 c6a:	31 09       	sbc	r19, r1
 c6c:	39 83       	std	Y+1, r19	; 0x01
 c6e:	28 83       	st	Y, r18
 c70:	3a c0       	rjmp	.+116    	; 0xce6 <malloc+0x124>
 c72:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 c76:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 c7a:	23 2b       	or	r18, r19
 c7c:	41 f4       	brne	.+16     	; 0xc8e <malloc+0xcc>
 c7e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c82:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c86:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <__brkval+0x1>
 c8a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <__brkval>
 c8e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c92:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c96:	21 15       	cp	r18, r1
 c98:	31 05       	cpc	r19, r1
 c9a:	41 f4       	brne	.+16     	; 0xcac <malloc+0xea>
 c9c:	2d b7       	in	r18, 0x3d	; 61
 c9e:	3e b7       	in	r19, 0x3e	; 62
 ca0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 ca4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ca8:	24 1b       	sub	r18, r20
 caa:	35 0b       	sbc	r19, r21
 cac:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <__brkval>
 cb0:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <__brkval+0x1>
 cb4:	e2 17       	cp	r30, r18
 cb6:	f3 07       	cpc	r31, r19
 cb8:	a0 f4       	brcc	.+40     	; 0xce2 <malloc+0x120>
 cba:	2e 1b       	sub	r18, r30
 cbc:	3f 0b       	sbc	r19, r31
 cbe:	28 17       	cp	r18, r24
 cc0:	39 07       	cpc	r19, r25
 cc2:	78 f0       	brcs	.+30     	; 0xce2 <malloc+0x120>
 cc4:	ac 01       	movw	r20, r24
 cc6:	4e 5f       	subi	r20, 0xFE	; 254
 cc8:	5f 4f       	sbci	r21, 0xFF	; 255
 cca:	24 17       	cp	r18, r20
 ccc:	35 07       	cpc	r19, r21
 cce:	48 f0       	brcs	.+18     	; 0xce2 <malloc+0x120>
 cd0:	4e 0f       	add	r20, r30
 cd2:	5f 1f       	adc	r21, r31
 cd4:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <__brkval+0x1>
 cd8:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <__brkval>
 cdc:	81 93       	st	Z+, r24
 cde:	91 93       	st	Z+, r25
 ce0:	02 c0       	rjmp	.+4      	; 0xce6 <malloc+0x124>
 ce2:	e0 e0       	ldi	r30, 0x00	; 0
 ce4:	f0 e0       	ldi	r31, 0x00	; 0
 ce6:	cf 01       	movw	r24, r30
 ce8:	df 91       	pop	r29
 cea:	cf 91       	pop	r28
 cec:	1f 91       	pop	r17
 cee:	0f 91       	pop	r16
 cf0:	08 95       	ret

00000cf2 <free>:
 cf2:	cf 93       	push	r28
 cf4:	df 93       	push	r29
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	09 f4       	brne	.+2      	; 0xcfc <free+0xa>
 cfa:	81 c0       	rjmp	.+258    	; 0xdfe <free+0x10c>
 cfc:	fc 01       	movw	r30, r24
 cfe:	32 97       	sbiw	r30, 0x02	; 2
 d00:	13 82       	std	Z+3, r1	; 0x03
 d02:	12 82       	std	Z+2, r1	; 0x02
 d04:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <__flp>
 d08:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <__flp+0x1>
 d0c:	10 97       	sbiw	r26, 0x00	; 0
 d0e:	81 f4       	brne	.+32     	; 0xd30 <free+0x3e>
 d10:	20 81       	ld	r18, Z
 d12:	31 81       	ldd	r19, Z+1	; 0x01
 d14:	82 0f       	add	r24, r18
 d16:	93 1f       	adc	r25, r19
 d18:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 d1c:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 d20:	28 17       	cp	r18, r24
 d22:	39 07       	cpc	r19, r25
 d24:	51 f5       	brne	.+84     	; 0xd7a <free+0x88>
 d26:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <__brkval+0x1>
 d2a:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <__brkval>
 d2e:	67 c0       	rjmp	.+206    	; 0xdfe <free+0x10c>
 d30:	ed 01       	movw	r28, r26
 d32:	20 e0       	ldi	r18, 0x00	; 0
 d34:	30 e0       	ldi	r19, 0x00	; 0
 d36:	ce 17       	cp	r28, r30
 d38:	df 07       	cpc	r29, r31
 d3a:	40 f4       	brcc	.+16     	; 0xd4c <free+0x5a>
 d3c:	4a 81       	ldd	r20, Y+2	; 0x02
 d3e:	5b 81       	ldd	r21, Y+3	; 0x03
 d40:	9e 01       	movw	r18, r28
 d42:	41 15       	cp	r20, r1
 d44:	51 05       	cpc	r21, r1
 d46:	f1 f0       	breq	.+60     	; 0xd84 <free+0x92>
 d48:	ea 01       	movw	r28, r20
 d4a:	f5 cf       	rjmp	.-22     	; 0xd36 <free+0x44>
 d4c:	d3 83       	std	Z+3, r29	; 0x03
 d4e:	c2 83       	std	Z+2, r28	; 0x02
 d50:	40 81       	ld	r20, Z
 d52:	51 81       	ldd	r21, Z+1	; 0x01
 d54:	84 0f       	add	r24, r20
 d56:	95 1f       	adc	r25, r21
 d58:	c8 17       	cp	r28, r24
 d5a:	d9 07       	cpc	r29, r25
 d5c:	59 f4       	brne	.+22     	; 0xd74 <free+0x82>
 d5e:	88 81       	ld	r24, Y
 d60:	99 81       	ldd	r25, Y+1	; 0x01
 d62:	84 0f       	add	r24, r20
 d64:	95 1f       	adc	r25, r21
 d66:	02 96       	adiw	r24, 0x02	; 2
 d68:	91 83       	std	Z+1, r25	; 0x01
 d6a:	80 83       	st	Z, r24
 d6c:	8a 81       	ldd	r24, Y+2	; 0x02
 d6e:	9b 81       	ldd	r25, Y+3	; 0x03
 d70:	93 83       	std	Z+3, r25	; 0x03
 d72:	82 83       	std	Z+2, r24	; 0x02
 d74:	21 15       	cp	r18, r1
 d76:	31 05       	cpc	r19, r1
 d78:	29 f4       	brne	.+10     	; 0xd84 <free+0x92>
 d7a:	f0 93 16 01 	sts	0x0116, r31	; 0x800116 <__flp+0x1>
 d7e:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <__flp>
 d82:	3d c0       	rjmp	.+122    	; 0xdfe <free+0x10c>
 d84:	e9 01       	movw	r28, r18
 d86:	fb 83       	std	Y+3, r31	; 0x03
 d88:	ea 83       	std	Y+2, r30	; 0x02
 d8a:	49 91       	ld	r20, Y+
 d8c:	59 91       	ld	r21, Y+
 d8e:	c4 0f       	add	r28, r20
 d90:	d5 1f       	adc	r29, r21
 d92:	ec 17       	cp	r30, r28
 d94:	fd 07       	cpc	r31, r29
 d96:	61 f4       	brne	.+24     	; 0xdb0 <free+0xbe>
 d98:	80 81       	ld	r24, Z
 d9a:	91 81       	ldd	r25, Z+1	; 0x01
 d9c:	84 0f       	add	r24, r20
 d9e:	95 1f       	adc	r25, r21
 da0:	02 96       	adiw	r24, 0x02	; 2
 da2:	e9 01       	movw	r28, r18
 da4:	99 83       	std	Y+1, r25	; 0x01
 da6:	88 83       	st	Y, r24
 da8:	82 81       	ldd	r24, Z+2	; 0x02
 daa:	93 81       	ldd	r25, Z+3	; 0x03
 dac:	9b 83       	std	Y+3, r25	; 0x03
 dae:	8a 83       	std	Y+2, r24	; 0x02
 db0:	e0 e0       	ldi	r30, 0x00	; 0
 db2:	f0 e0       	ldi	r31, 0x00	; 0
 db4:	12 96       	adiw	r26, 0x02	; 2
 db6:	8d 91       	ld	r24, X+
 db8:	9c 91       	ld	r25, X
 dba:	13 97       	sbiw	r26, 0x03	; 3
 dbc:	00 97       	sbiw	r24, 0x00	; 0
 dbe:	19 f0       	breq	.+6      	; 0xdc6 <free+0xd4>
 dc0:	fd 01       	movw	r30, r26
 dc2:	dc 01       	movw	r26, r24
 dc4:	f7 cf       	rjmp	.-18     	; 0xdb4 <free+0xc2>
 dc6:	8d 91       	ld	r24, X+
 dc8:	9c 91       	ld	r25, X
 dca:	11 97       	sbiw	r26, 0x01	; 1
 dcc:	9d 01       	movw	r18, r26
 dce:	2e 5f       	subi	r18, 0xFE	; 254
 dd0:	3f 4f       	sbci	r19, 0xFF	; 255
 dd2:	82 0f       	add	r24, r18
 dd4:	93 1f       	adc	r25, r19
 dd6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 dda:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 dde:	28 17       	cp	r18, r24
 de0:	39 07       	cpc	r19, r25
 de2:	69 f4       	brne	.+26     	; 0xdfe <free+0x10c>
 de4:	30 97       	sbiw	r30, 0x00	; 0
 de6:	29 f4       	brne	.+10     	; 0xdf2 <free+0x100>
 de8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp+0x1>
 dec:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__flp>
 df0:	02 c0       	rjmp	.+4      	; 0xdf6 <free+0x104>
 df2:	13 82       	std	Z+3, r1	; 0x03
 df4:	12 82       	std	Z+2, r1	; 0x02
 df6:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <__brkval+0x1>
 dfa:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <__brkval>
 dfe:	df 91       	pop	r29
 e00:	cf 91       	pop	r28
 e02:	08 95       	ret

00000e04 <memset>:
 e04:	dc 01       	movw	r26, r24
 e06:	01 c0       	rjmp	.+2      	; 0xe0a <memset+0x6>
 e08:	6d 93       	st	X+, r22
 e0a:	41 50       	subi	r20, 0x01	; 1
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	e0 f7       	brcc	.-8      	; 0xe08 <memset+0x4>
 e10:	08 95       	ret

00000e12 <_exit>:
 e12:	f8 94       	cli

00000e14 <__stop_program>:
 e14:	ff cf       	rjmp	.-2      	; 0xe14 <__stop_program>
